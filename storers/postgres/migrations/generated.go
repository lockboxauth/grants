// Code generated by go-bindata.
// sources:
// sql/20160723_init.sql
// sql/20180421_0_ip.sql
// sql/20200314_0_account.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sql20160723_initSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\x5f\x4b\xf3\x30\x14\x06\xf0\xeb\x9e\x4f\x71\xee\xd6\xf2\x76\x2f\x82\xe0\xc5\x76\x95\xad\x11\x8b\xfd\x67\x4c\xc5\x59\xca\x08\x6d\x36\x03\xb5\x2d\x49\xe6\xd8\xb7\x97\x16\xd1\x49\x55\x24\xb7\xbf\x1c\x9e\x73\x9e\xf9\x1c\xff\xbd\xa8\xbd\x16\x56\x62\xde\xc3\x9a\x51\xc2\x29\x72\xb2\x8a\x28\xee\xb5\x68\xad\x41\x17\x1c\x55\xe3\xfa\x86\x30\xf7\xf2\xca\xc3\x8c\x85\x31\x61\x1b\xbc\xa5\x1b\x1f\x1c\xd3\x1d\x74\x25\xb7\xf6\xd4\x4b\xe4\xf4\x91\x63\x92\x72\x4c\xf2\x28\xc2\x80\x5e\x93\x3c\xe2\x38\x9b\x7d\x32\x55\xff\x86\x2a\x2d\x85\x95\xf5\x56\x58\xe4\x61\x4c\xef\x39\x89\x33\xfe\x34\xc5\x6d\x77\x74\xbd\x61\x68\xd5\xf5\xd2\xe0\x03\x61\x43\xb8\xa2\x9c\x4a\xa1\xb5\x38\x15\xe5\x62\xf1\x2a\x74\xf5\x2c\x74\x51\xfa\xe0\xf4\xba\xdb\xa9\x66\x0c\xf3\xfe\x75\xdc\xeb\x87\x4c\x8d\x92\xad\xfd\x9b\x55\x3d\x86\x09\xfd\x6e\xbb\x8b\xff\xe3\x1b\xd0\xc1\xc8\x1a\x57\x69\x1a\x51\x92\x4c\xe5\x4e\x34\x46\xfa\x00\x4e\x9e\x84\x77\x39\x75\xcf\xce\xeb\xe3\xc7\x11\x3d\xf0\x96\x00\xe7\xd5\x05\xdd\xb1\x85\x80\xa5\xd9\x97\xea\x96\xf0\x16\x00\x00\xff\xff\xa7\x13\x93\xf3\xdf\x01\x00\x00")

func sql20160723_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql20160723_initSql,
		"sql/20160723_init.sql",
	)
}

func sql20160723_initSql() (*asset, error) {
	bytes, err := sql20160723_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/20160723_init.sql", size: 479, mode: os.FileMode(436), modTime: time.Unix(1524319693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql20180421_0_ipSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\xb1\x6a\xc3\x30\x18\xc4\xf1\x39\x7a\x8a\xdb\x92\xd0\x66\x2a\x74\xc9\xa4\x46\x0a\x15\xc8\x72\x90\x3f\x95\xd2\x25\x88\x56\x04\x0d\x75\x84\x2d\xe3\xd7\xef\x50\xd7\x18\x6c\x3c\x74\xbf\x3f\xc7\xef\x70\xc0\xc3\x77\xbc\x35\x3e\x07\xb8\xc4\xb8\x26\x69\x41\xfc\x45\x4b\xdc\x1a\x5f\xe7\x16\x5c\x08\x9c\x4a\xed\x0a\x83\xae\x0d\xd7\x98\xf0\xc6\xed\xe9\x95\xdb\xdd\xd3\xf3\x1e\xa6\x24\x18\xa7\x35\x84\x3c\x73\xa7\x09\xdb\xed\x23\xdb\x6c\x80\x69\xf7\xd9\x04\x9f\xff\x97\x76\x6d\xf8\xba\xfa\x0c\x52\x85\xac\x88\x17\x17\xfa\x98\x87\xf5\xbd\xdf\xed\x87\x56\xd8\xf2\xf2\x17\xab\x33\xe4\xbb\xaa\xa8\x42\x4c\x47\xc6\xa6\x56\x71\xef\xeb\x25\xed\x72\xfe\x0b\x5f\x7d\x18\x8d\xab\xab\x81\x33\x77\xc6\x04\x65\x24\x8d\xb6\x23\xfb\x09\x00\x00\xff\xff\x33\xeb\x1a\xa4\x9a\x01\x00\x00")

func sql20180421_0_ipSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql20180421_0_ipSql,
		"sql/20180421_0_ip.sql",
	)
}

func sql20180421_0_ipSql() (*asset, error) {
	bytes, err := sql20180421_0_ipSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/20180421_0_ip.sql", size: 410, mode: os.FileMode(436), modTime: time.Unix(1524321607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql20200314_0_accountSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2f\x4a\xcc\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\x4c\x4e\xce\x2f\xcd\x2b\x89\xcf\x4c\x51\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x36\xd3\x54\xf0\xf3\x0f\x51\xf0\x0b\xf5\xf1\x51\x70\x71\x75\x73\x0c\xf5\x09\x51\x50\x57\xb7\xe6\xe2\x42\x36\xd9\x25\xbf\x3c\x0f\x9b\xd9\x2e\x41\xfe\x01\x30\xc3\x3d\xdd\x14\x5c\x23\x3c\x83\x43\x82\x91\xac\xb1\xe6\x02\x04\x00\x00\xff\xff\x3c\x48\x7c\xd8\xa0\x00\x00\x00")

func sql20200314_0_accountSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql20200314_0_accountSql,
		"sql/20200314_0_account.sql",
	)
}

func sql20200314_0_accountSql() (*asset, error) {
	bytes, err := sql20200314_0_accountSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/20200314_0_account.sql", size: 160, mode: os.FileMode(436), modTime: time.Unix(1584233664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/20160723_init.sql":      sql20160723_initSql,
	"sql/20180421_0_ip.sql":      sql20180421_0_ipSql,
	"sql/20200314_0_account.sql": sql20200314_0_accountSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sql": {nil, map[string]*bintree{
		"20160723_init.sql":      {sql20160723_initSql, map[string]*bintree{}},
		"20180421_0_ip.sql":      {sql20180421_0_ipSql, map[string]*bintree{}},
		"20200314_0_account.sql": {sql20200314_0_accountSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
